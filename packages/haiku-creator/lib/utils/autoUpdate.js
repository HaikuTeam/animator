'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var qs = require('qs');
var os = require('os');
var electron = require('electron');
var fetch = require('node-fetch');

var _require = require('./fileManipulation'),
    download = _require.download,
    unzip = _require.unzip;

var opts = {
  server: process.env.HAIKU_AUTOUPDATE_SERVER,
  environment: process.env.HAIKU_RELEASE_ENVIRONMENT,
  branch: process.env.HAIKU_RELEASE_BRANCH,
  platform: process.env.HAIKU_RELEASE_PLATFORM,
  version: process.env.HAIKU_RELEASE_VERSION
};

module.exports = {
  update: function update(url, progressCallback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : opts;

    return new Promise(function (resolve, reject) {
      if (process.env.HAIKU_SKIP_AUTOUPDATE !== '1') {
        if (!options.server || !options.environment || !options.branch || !options.platform || !options.version) {
          throw new Error('Missing release/autoupdate environment variables');
        }

        var tempPath = os.tmpdir();
        var zipPath = tempPath + '/haiku.zip';
        var installationPath = '/Applications';

        download(url, zipPath, progressCallback).then(function () {
          unzip(zipPath, installationPath);
        }).then(function () {
          resolve(true);
          electron.remote.app.relaunch();
          electron.remote.app.exit();
        });
      }
    });
  },
  checkUpdates: function checkUpdates() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.checkServer().then(function (_ref) {
        var status = _ref.status,
            url = _ref.url;

        if (status === 200 && url) {
          resolve({ shouldUpdate: true, url: url });
        }

        resolve({ shouldUpdate: false, url: null });
      }).catch(reject);
    });
  },
  checkServer: function checkServer() {
    var _this2 = this;

    var status = void 0;

    return new Promise(function (resolve, reject) {
      fetch(_this2.generateURL(opts)).then(function (response) {
        status = response.status;
        return response.json();
      }).then(function (data) {
        resolve({ status: status, url: data.url });
      }).catch(function (error) {
        reject(error);
      });
    });
  },
  generateURL: function generateURL(_ref2) {
    var server = _ref2.server,
        query = _objectWithoutProperties(_ref2, ['server']);

    var queryString = qs.stringify(query);

    return server + '/updates/latest?' + queryString;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRvVXBkYXRlLmpzIl0sIm5hbWVzIjpbInFzIiwicmVxdWlyZSIsIm9zIiwiZWxlY3Ryb24iLCJmZXRjaCIsImRvd25sb2FkIiwidW56aXAiLCJvcHRzIiwic2VydmVyIiwicHJvY2VzcyIsImVudiIsIkhBSUtVX0FVVE9VUERBVEVfU0VSVkVSIiwiZW52aXJvbm1lbnQiLCJIQUlLVV9SRUxFQVNFX0VOVklST05NRU5UIiwiYnJhbmNoIiwiSEFJS1VfUkVMRUFTRV9CUkFOQ0giLCJwbGF0Zm9ybSIsIkhBSUtVX1JFTEVBU0VfUExBVEZPUk0iLCJ2ZXJzaW9uIiwiSEFJS1VfUkVMRUFTRV9WRVJTSU9OIiwibW9kdWxlIiwiZXhwb3J0cyIsInVwZGF0ZSIsInVybCIsInByb2dyZXNzQ2FsbGJhY2siLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJIQUlLVV9TS0lQX0FVVE9VUERBVEUiLCJFcnJvciIsInRlbXBQYXRoIiwidG1wZGlyIiwiemlwUGF0aCIsImluc3RhbGxhdGlvblBhdGgiLCJ0aGVuIiwicmVtb3RlIiwiYXBwIiwicmVsYXVuY2giLCJleGl0IiwiY2hlY2tVcGRhdGVzIiwiY2hlY2tTZXJ2ZXIiLCJzdGF0dXMiLCJzaG91bGRVcGRhdGUiLCJjYXRjaCIsImdlbmVyYXRlVVJMIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImVycm9yIiwicXVlcnkiLCJxdWVyeVN0cmluZyIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsS0FBS0QsUUFBUSxJQUFSLENBQVg7QUFDQSxJQUFNRSxXQUFXRixRQUFRLFVBQVIsQ0FBakI7QUFDQSxJQUFNRyxRQUFRSCxRQUFRLFlBQVIsQ0FBZDs7ZUFDMEJBLFFBQVEsb0JBQVIsQztJQUFuQkksUSxZQUFBQSxRO0lBQVVDLEssWUFBQUEsSzs7QUFFakIsSUFBTUMsT0FBTztBQUNYQyxVQUFRQyxRQUFRQyxHQUFSLENBQVlDLHVCQURUO0FBRVhDLGVBQWFILFFBQVFDLEdBQVIsQ0FBWUcseUJBRmQ7QUFHWEMsVUFBUUwsUUFBUUMsR0FBUixDQUFZSyxvQkFIVDtBQUlYQyxZQUFVUCxRQUFRQyxHQUFSLENBQVlPLHNCQUpYO0FBS1hDLFdBQVNULFFBQVFDLEdBQVIsQ0FBWVM7QUFMVixDQUFiOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZDLFFBRGUsa0JBQ1BDLEdBRE8sRUFDRkMsZ0JBREUsRUFDZ0M7QUFBQSxRQUFoQkMsT0FBZ0IsdUVBQU5sQixJQUFNOztBQUM3QyxXQUFPLElBQUltQixPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDLFVBQUluQixRQUFRQyxHQUFSLENBQVltQixxQkFBWixLQUFzQyxHQUExQyxFQUErQztBQUM3QyxZQUNFLENBQUNKLFFBQVFqQixNQUFULElBQ0EsQ0FBQ2lCLFFBQVFiLFdBRFQsSUFFQSxDQUFDYSxRQUFRWCxNQUZULElBR0EsQ0FBQ1csUUFBUVQsUUFIVCxJQUlBLENBQUNTLFFBQVFQLE9BTFgsRUFNRTtBQUNBLGdCQUFNLElBQUlZLEtBQUosQ0FBVSxrREFBVixDQUFOO0FBQ0Q7O0FBRUQsWUFBTUMsV0FBVzdCLEdBQUc4QixNQUFILEVBQWpCO0FBQ0EsWUFBTUMsVUFBYUYsUUFBYixlQUFOO0FBQ0EsWUFBTUcsbUJBQW1CLGVBQXpCOztBQUVBN0IsaUJBQVNrQixHQUFULEVBQWNVLE9BQWQsRUFBdUJULGdCQUF2QixFQUNHVyxJQURILENBQ1EsWUFBTTtBQUFFN0IsZ0JBQU0yQixPQUFOLEVBQWVDLGdCQUFmO0FBQWtDLFNBRGxELEVBRUdDLElBRkgsQ0FFUSxZQUFNO0FBQ1ZSLGtCQUFRLElBQVI7QUFDQXhCLG1CQUFTaUMsTUFBVCxDQUFnQkMsR0FBaEIsQ0FBb0JDLFFBQXBCO0FBQ0FuQyxtQkFBU2lDLE1BQVQsQ0FBZ0JDLEdBQWhCLENBQW9CRSxJQUFwQjtBQUNELFNBTkg7QUFPRDtBQUNGLEtBeEJNLENBQVA7QUF5QkQsR0EzQmM7QUE2QmZDLGNBN0JlLDBCQTZCQztBQUFBOztBQUNkLFdBQU8sSUFBSWQsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxZQUFLYSxXQUFMLEdBQ0dOLElBREgsQ0FDUSxnQkFBbUI7QUFBQSxZQUFqQk8sTUFBaUIsUUFBakJBLE1BQWlCO0FBQUEsWUFBVG5CLEdBQVMsUUFBVEEsR0FBUzs7QUFDdkIsWUFBSW1CLFdBQVcsR0FBWCxJQUFrQm5CLEdBQXRCLEVBQTJCO0FBQ3pCSSxrQkFBUSxFQUFDZ0IsY0FBYyxJQUFmLEVBQXFCcEIsUUFBckIsRUFBUjtBQUNEOztBQUVESSxnQkFBUSxFQUFDZ0IsY0FBYyxLQUFmLEVBQXNCcEIsS0FBSyxJQUEzQixFQUFSO0FBQ0QsT0FQSCxFQVFHcUIsS0FSSCxDQVFTaEIsTUFSVDtBQVNELEtBVk0sQ0FBUDtBQVdELEdBekNjO0FBMkNmYSxhQTNDZSx5QkEyQ0E7QUFBQTs7QUFDYixRQUFJQyxlQUFKOztBQUVBLFdBQU8sSUFBSWhCLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEN4QixZQUFNLE9BQUt5QyxXQUFMLENBQWlCdEMsSUFBakIsQ0FBTixFQUNHNEIsSUFESCxDQUNRLFVBQUNXLFFBQUQsRUFBYztBQUNsQkosaUJBQVNJLFNBQVNKLE1BQWxCO0FBQ0EsZUFBT0ksU0FBU0MsSUFBVCxFQUFQO0FBQ0QsT0FKSCxFQUtHWixJQUxILENBS1EsVUFBQ2EsSUFBRCxFQUFVO0FBQ2RyQixnQkFBUSxFQUFDZSxRQUFRQSxNQUFULEVBQWlCbkIsS0FBS3lCLEtBQUt6QixHQUEzQixFQUFSO0FBQ0QsT0FQSCxFQVFHcUIsS0FSSCxDQVFTLFVBQUNLLEtBQUQsRUFBVztBQUNoQnJCLGVBQU9xQixLQUFQO0FBQ0QsT0FWSDtBQVdELEtBWk0sQ0FBUDtBQWFELEdBM0RjO0FBNkRmSixhQTdEZSw4QkE2RGtCO0FBQUEsUUFBbkJyQyxNQUFtQixTQUFuQkEsTUFBbUI7QUFBQSxRQUFSMEMsS0FBUTs7QUFDL0IsUUFBTUMsY0FBY25ELEdBQUdvRCxTQUFILENBQWFGLEtBQWIsQ0FBcEI7O0FBRUEsV0FBVTFDLE1BQVYsd0JBQW1DMkMsV0FBbkM7QUFDRDtBQWpFYyxDQUFqQiIsImZpbGUiOiJhdXRvVXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcXMgPSByZXF1aXJlKCdxcycpXG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJylcbmNvbnN0IGVsZWN0cm9uID0gcmVxdWlyZSgnZWxlY3Ryb24nKVxuY29uc3QgZmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJylcbmNvbnN0IHtkb3dubG9hZCwgdW56aXB9ID0gcmVxdWlyZSgnLi9maWxlTWFuaXB1bGF0aW9uJylcblxuY29uc3Qgb3B0cyA9IHtcbiAgc2VydmVyOiBwcm9jZXNzLmVudi5IQUlLVV9BVVRPVVBEQVRFX1NFUlZFUixcbiAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkhBSUtVX1JFTEVBU0VfRU5WSVJPTk1FTlQsXG4gIGJyYW5jaDogcHJvY2Vzcy5lbnYuSEFJS1VfUkVMRUFTRV9CUkFOQ0gsXG4gIHBsYXRmb3JtOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX1BMQVRGT1JNLFxuICB2ZXJzaW9uOiBwcm9jZXNzLmVudi5IQUlLVV9SRUxFQVNFX1ZFUlNJT05cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHVwZGF0ZSAodXJsLCBwcm9ncmVzc0NhbGxiYWNrLCBvcHRpb25zID0gb3B0cykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuSEFJS1VfU0tJUF9BVVRPVVBEQVRFICE9PSAnMScpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFvcHRpb25zLnNlcnZlciB8fFxuICAgICAgICAgICFvcHRpb25zLmVudmlyb25tZW50IHx8XG4gICAgICAgICAgIW9wdGlvbnMuYnJhbmNoIHx8XG4gICAgICAgICAgIW9wdGlvbnMucGxhdGZvcm0gfHxcbiAgICAgICAgICAhb3B0aW9ucy52ZXJzaW9uXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZWxlYXNlL2F1dG91cGRhdGUgZW52aXJvbm1lbnQgdmFyaWFibGVzJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRlbXBQYXRoID0gb3MudG1wZGlyKClcbiAgICAgICAgY29uc3QgemlwUGF0aCA9IGAke3RlbXBQYXRofS9oYWlrdS56aXBgXG4gICAgICAgIGNvbnN0IGluc3RhbGxhdGlvblBhdGggPSAnL0FwcGxpY2F0aW9ucydcblxuICAgICAgICBkb3dubG9hZCh1cmwsIHppcFBhdGgsIHByb2dyZXNzQ2FsbGJhY2spXG4gICAgICAgICAgLnRoZW4oKCkgPT4geyB1bnppcCh6aXBQYXRoLCBpbnN0YWxsYXRpb25QYXRoKSB9KVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgIGVsZWN0cm9uLnJlbW90ZS5hcHAucmVsYXVuY2goKVxuICAgICAgICAgICAgZWxlY3Ryb24ucmVtb3RlLmFwcC5leGl0KClcbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgY2hlY2tVcGRhdGVzICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jaGVja1NlcnZlcigpXG4gICAgICAgIC50aGVuKCh7c3RhdHVzLCB1cmx9KSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwICYmIHVybCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh7c2hvdWxkVXBkYXRlOiB0cnVlLCB1cmx9KVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUoe3Nob3VsZFVwZGF0ZTogZmFsc2UsIHVybDogbnVsbH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChyZWplY3QpXG4gICAgfSlcbiAgfSxcblxuICBjaGVja1NlcnZlciAoKSB7XG4gICAgbGV0IHN0YXR1c1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZldGNoKHRoaXMuZ2VuZXJhdGVVUkwob3B0cykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHtzdGF0dXM6IHN0YXR1cywgdXJsOiBkYXRhLnVybH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBnZW5lcmF0ZVVSTCAoe3NlcnZlciwgLi4ucXVlcnl9KSB7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxcy5zdHJpbmdpZnkocXVlcnkpXG5cbiAgICByZXR1cm4gYCR7c2VydmVyfS91cGRhdGVzL2xhdGVzdD8ke3F1ZXJ5U3RyaW5nfWBcbiAgfVxufVxuIl19